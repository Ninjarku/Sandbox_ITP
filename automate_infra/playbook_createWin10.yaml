- name: Deploys VM based on cloud image
  hosts: localhost
  become: yes
  vars:
    pool_name: default
    vm_name: win10-analysis-vm2
    vcpus: 2
    vm_memory: 8192
    cleanup: no
    net: default
    ssh_pub_key: "/root/.ssh/id_rsa.pub"
    qcow2_location: "/home/cape/libvirt/images"
    vm_os_variant: "win10"
    vm_network_bridge: "virbr1"
  
  tasks:
    - name: Create a directory to store .qcow2 file if it does not exist
      file:
          path: ~/libvirt/images
          state: directory
          mode: '0755'

    # - name: create a copy of the qcow2 image
    #   copy:
    #     src: "{{ qcow2_location }}/{{ qcow2.name }}"
    #     dest: "{{ IMAGE }}"
    #     remote_src: yes
    
    # - name: Install KVM and related packages on Ubuntu
    #   apt: name={{ item }} state=present update_cache=true allow_unauthenticated=true
    #   loop: [qemu-kvm, libvirt-daemon-system, libvirt-clients, bridge-utils, virt-manager, virt-viewer]

    # - name: inject ssh key w/ virt-customize
    #   command: >
    #     virt-customize
    #     --add {{ IMAGE }}
    #     --ssh-inject root:string:"{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    #     --run-command 'chcon -R unconfined_u:object_r:ssh_home_t:s0 /root/.ssh/'
    # #    --selinux-relabel

    - name: use virt-install to create VM
      become: yes
      command: >
        virt-install 
        --name {{ vm_name }}
        --vcpus={{vcpus}}
        --memory {{ vm_memory }}
        --os-variant {{ vm_os_variant }}
        --disk pool={{ pool_name }},size=60,bus=virtio,format=qcow2
        --disk /data1/libvirt/images/en-us_windows_10_consumer_editions_version_21h2_updated_sep_2022_x64_dvd_bdec96d8.iso,device=cdrom,bus=ide
        --disk /data1/libvirt/images/virtio-win-0.1.240.iso,device=cdrom,bus=ide
        --network bridge={{ vm_network_bridge }},model=virtio 
        --vnc

    - name: wait for {{ vm_name }} to get an IP
      become: yes
      shell: >
        virsh domifaddr {{ vm_name }} | awk '/ipv4/ {split($NF,a,"/"); print a[1]}'
      register: IPinfo
      until: IPinfo.stdout != ""
      retries: 10
      delay: 5

    - name: use virtsh to create snapshot
      become: yes
      shell: >
        virsh snapshot-create-as {{vm_name}} snapshot0 --description "snapshot0_master"     
        

    # - name: add this VM to a "allVMs" group for future plays
    #   add_host:
    #     name: "{{ vm_name }}"
    #     ansible_host: "{{ IPinfo.stdout }}"
    #     ansible_user: root
    #     ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    #     groups: allVMs

    # - name: output IPinfo
    #   debug:
    #     msg: "now you can perform the following: ssh root@{{ IPinfo.stdout }}"